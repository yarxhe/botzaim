# src/handlers.py
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from . import database as db
from . import keyboards as kb
from . import config

logger = logging.getLogger(__name__)
States = config.States

def get_days_left(due_date_str: str) -> str:
    try:
        due_date = datetime.strptime(due_date_str, "%d.%m.%Y").date()
        delta = (due_date - datetime.now().date()).days
        if delta < 0:
            days = abs(delta)
            return f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days} –¥."
        elif delta == 0:
            return "—Å–µ–≥–æ–¥–Ω—è"
        else:
            return f"{delta} –¥."
    except (ValueError, TypeError):
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("--- Triggered start (/start command) ---")
    context.user_data.clear()
    await update.message.reply_photo(
        photo=open(config.BOT_PHOTO_PATH, 'rb'),
        caption="–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫."
    )
    await update.message.reply_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.get_main_menu_keyboard(),
        parse_mode='Markdown'
    )

async def start_from_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("--- Triggered start_from_callback (Back to menu button) ---")
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.get_main_menu_keyboard(),
        parse_mode='Markdown'
    )

async def my_debts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("--- Triggered my_debts_menu ---")
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    creditors = db.get_creditors(user_id)
    if not creditors:
        await query.edit_message_text(text="üéâ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤!", reply_markup=kb.get_main_menu_keyboard())
        return
    total = db.get_total_debt(user_id)
    text = f"–û–±—â–∞—è —Å—É–º–º–∞ –≤–∞—à–∏—Ö –¥–æ–ª–≥–æ–≤: *{total}* —Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞:"
    await query.edit_message_text(text, reply_markup=kb.get_list_keyboard('debt', creditors), parse_mode='Markdown')

async def their_debts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("--- Triggered their_debts_menu ---")
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    debtors = db.get_debtors(user_id)
    if not debtors:
        await query.edit_message_text(text="üéâ –í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω!", reply_markup=kb.get_main_menu_keyboard())
        return
    total = db.get_total_receivables(user_id)
    text = f"–û–±—â–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –¥–æ–ª–∂–Ω—ã: *{total}* —Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–∏–∫–∞:"
    await query.edit_message_text(text, reply_markup=kb.get_list_keyboard('receivable', debtors), parse_mode='Markdown')

# --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
async def add_record_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- Triggered add_record_start (Conversation) ---")
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=kb.get_add_type_keyboard())
    return States.CHOOSE_TYPE

async def add_record_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- In Conversation: add_record_type_chosen ---")
    query = update.callback_query
    await query.answer()
    flow = query.data.split('_')[-1]
    context.user_data['flow'] = flow
    context.user_data['messages_to_delete'] = [query.message.message_id] 
    text_prompt = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–º—É –í–´ –¥–æ–ª–∂–Ω—ã:" if flow == 'debt' else "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –í–ê–ú –¥–æ–ª–∂–µ–Ω:"
    sent_message = await query.message.reply_text(text_prompt)
    context.user_data['messages_to_delete'].append(sent_message.message_id)
    return States.ADD_NAME

async def add_record_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- In Conversation: add_record_name ---")
    context.user_data['name'] = update.message.text
    context.user_data['messages_to_delete'].append(update.message.message_id)
    sent_message = await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    context.user_data['messages_to_delete'].append(sent_message.message_id)
    return States.ADD_AMOUNT

async def add_record_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- In Conversation: add_record_amount ---")
    context.user_data['messages_to_delete'].append(update.message.message_id)
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            sent_message = await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            context.user_data['messages_to_delete'].append(sent_message.message_id)
            return States.ADD_AMOUNT
        context.user_data['amount'] = amount
        sent_message = await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ. –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        context.user_data['messages_to_delete'].append(sent_message.message_id)
        return States.ADD_DATE
    except ValueError:
        sent_message = await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        context.user_data['messages_to_delete'].append(sent_message.message_id)
        return States.ADD_AMOUNT

async def add_record_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- In Conversation: add_record_date ---")
    context.user_data['messages_to_delete'].append(update.message.message_id)
    date_text = update.message.text
    try:
        datetime.strptime(date_text, "%d.%m.%Y")
        context.user_data['due_date'] = date_text
        flow = context.user_data['flow']
        name = context.user_data['name']
        amount = context.user_data['amount']
        person_type = "–ö–æ–º—É" if flow == 'debt' else "–ö—Ç–æ"
        sent_message = await update.message.reply_text(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{person_type}: *{name}*\n–°—É–º–º–∞: *{amount}* —Ä—É–±.\n–î–∞—Ç–∞: *{date_text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=kb.get_confirmation_keyboard(flow), parse_mode='Markdown')
        context.user_data['messages_to_delete'].append(sent_message.message_id)
        return States.ADD_CONFIRMATION
    except ValueError:
        sent_message = await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì.")
        context.user_data['messages_to_delete'].append(sent_message.message_id)
        return States.ADD_DATE

async def add_record_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- In Conversation: add_record_confirm ---")
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    name = context.user_data['name']
    amount = context.user_data['amount']
    due_date = context.user_data['due_date']
    if context.user_data['flow'] == 'debt':
        db.add_debt(user_id, name, amount, due_date)
    else:
        db.add_receivable(user_id, name, amount, due_date)
    
    chat_id = query.message.chat_id
    for msg_id in context.user_data.get('messages_to_delete', []):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception: pass
    
    await context.bot.send_message(chat_id, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.get_main_menu_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è ---
async def repay_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- Triggered repay_start (Conversation) ---")
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('|')
    _, flow, name, *created_at_parts = parts
    created_at = " ".join(created_at_parts)
    
    context.user_data['repay_flow'] = flow
    repay_id = (query.from_user.id, name, created_at)
    context.user_data['repay_id'] = repay_id
    
    debt_info = db.get_debt_by_id(repay_id) if flow == 'debt' else db.get_receivable_by_id(repay_id)
    if not debt_info:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
        
    context.user_data['current_amount'] = debt_info[0]
    context.user_data['menu_message_id'] = query.message.message_id

    prompt_text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–≥–∞—Å–∏–ª–∏:" if flow == 'debt' else "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –≤–µ—Ä–Ω—É–ª–∏:"
    await query.edit_message_text(f"–¢–µ–∫—É—â–∏–π –¥–æ–ª–≥: *{debt_info[0]}* —Ä—É–±.\n\n{prompt_text}", parse_mode='Markdown')
    return States.REPAY_AMOUNT

async def repay_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- In Conversation: repay_amount ---")
    try:
        repay_amount = float(update.message.text.replace(',', '.'))
        current_amount = context.user_data['current_amount']
        
        if not (0 < repay_amount <= current_amount):
            await update.message.reply_text(f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0 –∏ –Ω–µ > {current_amount} —Ä—É–±.")
            return States.REPAY_AMOUNT
        
        new_amount = round(current_amount - repay_amount, 2)
        flow = context.user_data['repay_flow']
        debt_id = context.user_data['repay_id']
        
        await update.message.delete()
        
        final_text = ""
        if new_amount == 0:
            if flow == 'debt': db.delete_debt(debt_id)
            else: db.delete_receivable(debt_id)
            final_text = "‚úÖ –î–æ–ª–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç!"
        else:
            if flow == 'debt': db.update_debt_amount(debt_id, new_amount)
            else: db.update_receivable_amount(debt_id, new_amount)
            final_text = f"‚úÖ –°—É–º–º–∞ —É—á—Ç–µ–Ω–∞! –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: *{new_amount}* —Ä—É–±."
        
        menu_message_id = context.user_data.get('menu_message_id')
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=menu_message_id,
            text=f"{final_text}\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=kb.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return States.REPAY_AMOUNT

# --- –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–æ–≤ ---
async def main_menu_from_conv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- Cancelling conversation and returning to main menu ---")
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    for msg_id in context.user_data.get('messages_to_delete', []):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception: pass
            
    context.user_data.clear()
    await query.edit_message_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.get_main_menu_keyboard())
    return ConversationHandler.END
    
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("--- Cancelling conversation with /cancel ---")
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.")
    return ConversationHandler.END

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫–∞–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏ ---
async def list_navigation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    
    parts = data.split('|')
    action = parts[0]

    if action == "creditor":
        name = parts[1]
        records = db.get_debts_by_creditor(user_id, name)
        await query.edit_message_text(f"–í–∞—à–∏ –¥–æ–ª–≥–∏ *{name}*:", reply_markup=kb.get_records_keyboard('debt', name, records), parse_mode='Markdown')

    elif action == "debtor":
        name = parts[1]
        records = db.get_receivables_by_debtor(user_id, name)
        await query.edit_message_text(f"–î–æ–ª–≥–∏ –æ—Ç *{name}*:", reply_markup=kb.get_records_keyboard('receivable', name, records), parse_mode='Markdown')
    
    elif action == "view_debt":
        name, *created_at_parts = parts[1:]
        created_at = " ".join(created_at_parts)
        debt_info = db.get_debt_by_id((user_id, name, created_at))
        if debt_info:
            amount, due_date = debt_info
            days_left = get_days_left(due_date)
            text = (f"–ö–æ–º—É: *{name}*\n"
                    f"–°—É–º–º–∞: *{amount}* —Ä—É–±.\n"
                    f"–í–µ—Ä–Ω—É—Ç—å –¥–æ: *{due_date}*\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: *{days_left}*")
            await query.edit_message_text(text, reply_markup=kb.get_debt_management_keyboard(name, created_at), parse_mode='Markdown')

    elif action == "view_receivable":
        name, *created_at_parts = parts[1:]
        created_at = " ".join(created_at_parts)
        receivable_info = db.get_receivable_by_id((user_id, name, created_at))
        if receivable_info:
            amount, due_date = receivable_info
            days_left = get_days_left(due_date)
            text = (f"–ö—Ç–æ: *{name}*\n"
                    f"–°—É–º–º–∞: *{amount}* —Ä—É–±.\n"
                    f"–í–µ—Ä–Ω–µ—Ç –¥–æ: *{due_date}*\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: *{days_left}*")
            await query.edit_message_text(text, reply_markup=kb.get_receivable_management_keyboard(name, created_at), parse_mode='Markdown')

    elif action == "close":
        flow, name, *created_at_parts = parts[1:]
        created_at = " ".join(created_at_parts)
        
        if flow == "debt":
            db.delete_debt((user_id, name, created_at))
            await query.answer("‚úÖ –î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω!", show_alert=True)
            await my_debts_menu(update, context)
        else: # receivable
            db.delete_receivable((user_id, name, created_at))
            await query.answer("‚úÖ –î–æ–ª–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π!", show_alert=True)
            await their_debts_menu(update, context)