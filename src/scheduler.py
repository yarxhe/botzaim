# src/scheduler.py
import logging
from telegram.ext import ContextTypes
from . import database as db
from . import config

logger = logging.getLogger(__name__)

NOTIFICATION_DAYS = config.NOTIFICATION_DAYS
MY_DEBT_PHOTO = config.NOTIFICATION_PHOTO_PATH
THEIR_DEBT_PHOTO = config.NOTIFICATION_RECEIVABLE_PHOTO_PATH

async def check_due_dates(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–ª—è –û–ë–û–ò–• —Ç–∏–ø–æ–≤ –¥–æ–ª–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    logger.info("Running daily job: Checking all due dates...")
    
    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ú–û–ò–• –¥–æ–ª–≥–æ–≤ (–∫–æ–º—É –¥–æ–ª–∂–µ–Ω –Ø) ---
    try:
        debts_due_soon = db.get_debts_due_soon(days_ahead=NOTIFICATION_DAYS)
        logger.info(f"Found {len(debts_due_soon)} of MY debts due soon.")
        
        for debt in debts_due_soon:
            user_id = debt['user_id']
            days_left = debt['days_left']
            
            if days_left == 0:
                message = f"üîî *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –°–ï–ì–û–î–ù–Ø* –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫!\n\n"
            else:
                days_word = "–¥–Ω—è" if 1 < days_left < 5 else "–¥–Ω–µ–π"
                message = f"üîî *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –û—Å—Ç–∞–ª–æ—Å—å {days_left} {days_word}* –¥–æ —Å—Ä–æ–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞.\n\n"
            
            message += (f"–ö–æ–º—É: *{debt['name']}*\n"
                        f"–°—É–º–º–∞: *{debt['amount']}* —Ä—É–±.\n"
                        f"–í–µ—Ä–Ω—É—Ç—å –¥–æ: *{debt['due_date']}*")
            
            try:
                await context.bot.send_photo(
                    chat_id=user_id, photo=open(MY_DEBT_PHOTO, 'rb'),
                    caption=message, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Failed to send MY debt notification to {user_id}: {e}")

    except Exception as e:
        logger.error(f"Error checking MY debts: {e}")

    # --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–• –¥–æ–ª–≥–æ–≤ (–∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ú–ù–ï) ---
    try:
        receivables_due_soon = db.get_receivables_due_soon(days_ahead=NOTIFICATION_DAYS)
        logger.info(f"Found {len(receivables_due_soon)} of THEIR debts due soon.")

        for debt in receivables_due_soon:
            user_id = debt['user_id']
            days_left = debt['days_left']

            if days_left == 0:
                message = f"üîî *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –°–ï–ì–û–î–ù–Ø* –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥!\n\n"
            else:
                days_word = "–¥–Ω—è" if 1 < days_left < 5 else "–¥–Ω–µ–π"
                message = f"üîî *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ß–µ—Ä–µ–∑ {days_left} {days_word}* –≤–∞–º –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥.\n\n"

            message += (f"–ö—Ç–æ: *{debt['name']}*\n"
                        f"–°—É–º–º–∞: *{debt['amount']}* —Ä—É–±.\n"
                        f"–û–±–µ—â–∞–ª –≤–µ—Ä–Ω—É—Ç—å –¥–æ: *{debt['due_date']}*")
            
            try:
                await context.bot.send_photo(
                    chat_id=user_id, photo=open(THEIR_DEBT_PHOTO, 'rb'),
                    caption=message, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Failed to send THEIR debt notification to {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"Error checking THEIR debts: {e}")